import { SlashCommandBuilder } from "@discordjs/builders";
import { Routes as DiscordRESTRoutes } from "discord-api-types/v9";
import { REST as DiscordREST } from "@discordjs/rest";
import {
  Client as DiscordClient,
  Intents as DiscordIntents,
  CommandInteraction,
  SelectMenuInteraction,
} from "discord.js";

import { RoleManager } from "../../ports/roles";

import { CreateRoleListHandler } from "./create-role-list";

/**
 * Describes a Discord interaction command.
 */
export interface CommandMeta {
  /**
   * String user types to invoke command.
   */
  name: string;

  /**
   * User friendly short description of command.
   */
  description: string;

  /**
   * Function which will process a Discord API interaction when it is created.
   */
  onCommand: (cmd: CommandInteraction) => Promise<void>;
}

/**
 * Description of a Discord select menu interaction and how to handle it.
 */
export interface SelectMeta {
  /**
   * The ID of the select menu which triggered the interaction.
   */
  selectID: string;

  /**
   * Function which will process a Discord API interaction when it is created.
   */
  onSelect: (select: SelectMenuInteraction) => Promise<void>;
}

/**
 * Is able to provide metadata about an command.
 */
interface MetaDescriber {
  /**
   * @returns A description of what Discord command to respond and how to handle the interaction.
   */
  getCommandMeta(): CommandMeta;

  /**
   * @returns Descriptions of select menu interactions to handle which may be generated by the meta describer.
   */
  getSelectMetas(): SelectMeta[];
}

/**
 * Discord API configuration for behavior and authentication.
 */
export interface DiscordConfig {
  /**
   * Discord API credentials client ID.
   */
  clientID: string;

  /**
   * Discord API authentication token.
   */
  apiToken: string;

  /**
   * Discord IDs of servers (aka guilds) which the bot should act within.
   * Keys are nicknames of the servers. Values are the guild IDs.
   */
  guildIDs: { [key: string]: string };

  /**
   * The Discord ID of the server which will own custom emojis.
   */
  emojiGuildID: string;
}

export class DiscordAdapter {
  /**
   * Discord API configuration.
   */
  config: DiscordConfig;

  /**
   * The port used to manage roles.
   */
  roleManager: RoleManager;

  /**
   * Creates a DiscordAdapter.
   * @param config - Discord configuration.
   * @param roleManager - The role manager used by adapter.
   */
  constructor({
    config,
    roleManager,
  }: {
    config: DiscordConfig,
    roleManager: RoleManager;
  }) {
    this.config = config;
    this.roleManager = roleManager;
  }

  /**
   * Discord interaction commands to which Discord adapater will respond.
   */
  getCommandMetas(): CommandMeta[] {
    const describers = [
      new CreateRoleListHandler({
        roleManager: this.roleManager,
      }),
    ];

    return describers.map((d) => d.getCommandMeta());
  }
  
  /**
   * Sets up a Discord API client listen for Discord interaction events.
   */
  async setup(): Promise<void> {
    // Set the commands to display in Discord
    const cmdMetas = this.getCommandMetas();

    const slashCmds = cmdMetas.map((cmd) => new SlashCommandBuilder().setName(cmd.name).setDescription(cmd.description));
    const cmdsJSON = slashCmds.map((cmd) => cmd.toJSON());

    const discordREST = new DiscordREST({ version: "9" }).setToken(this.config.apiToken);

    await Promise.all(Object.values(this.config.guildIDs).map(async (guildID) => {
      console.log(`Setup Discord commands for ${guildID}`);
      await discordREST.put(DiscordRESTRoutes.applicationGuildCommands(this.config.clientID, guildID), { body: cmdsJSON });
    }));

    // Setup handler for commands
    const discordClient = new DiscordClient({ intents: [ DiscordIntents.FLAGS.GUILDS ] });

    // Wait for Discord client to be ready
    discordClient.on("interactionCreate", async (interaction) => {
      // TODO: Handle select, button, text input, interactions
      if (interaction.isCommand()) {
        const matchedCmds = cmdMetas.filter((cmd) => interaction.commandName == cmd.name);

        if (matchedCmds.length == 0) {
          // Not handling this command
          return;
        }

        if (matchedCmds.length > 1) {
          // Duplicate command names
          throw new Error(`Multiple CommandMeta objects matched the Discord interaction "${interaction.commandName}"`);
        }

        // Run command handler
        matchedCmds[0].onCommand(interaction);
      }
    });

    discordClient.login(this.config.apiToken);
  }
}
